#!/bin/bash

# condor-docker-pilot -- by Dario Berzano <dario.berzano@cern.ch>
#
# Entry point for the Docker container running CernVM: it starts a single-core
# Condor execute node that dies after the first job, or if no job is received,
# after a threshold time.
#
# This can be used as a Docker entry point: when the script terminates, the
# container terminates with it.
#
# It's effectively a Condor/CernVM pilot container.

# Configuration
condor_secret="@CONDOR_SECRET@"
condor_head='alidbz.cern.ch'

# How many seconds to wait for the job to come
pilot_sleep_s=120

# How many seconds between checking if master is still alive
condor_master_ping_s=4

# Output IP address
echo -n "Getting this container's IP address..."
my_ip_address_errcount=0
while [[ 1 ]] ; do
  my_ip_address=$( ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/' )
  if [[ $my_ip_address != '' ]] ; then
    break
  else
    my_ip_address_errcount=$(( $my_ip_address_errcount + 1 ))
    if [[ $my_ip_address_errcount == 20 ]] ; then
      echo 'FATAL: cannot get IP address'
      break
    else
      echo -n '.'
      sleep 1
    fi
  fi
done
echo "$my_ip_address"

# Every error is fatal
set -e

# Remove base Condor configuration: blank out the .local, we cannot delete it
echo -n 'Removing base Condor configuration...'
rm -rf /etc/condor/config.d/*
echo '# Blanked out' > /etc/condor/condor_config.local  # cannot remove
echo 'done'

# This is our configuration
echo -n 'Writing our Condor configuration...'
cat > /etc/condor/config.d/70docker <<_EoF_
# Execute node: we only need STARTD (and MASTER, mandatory)
DAEMON_LIST = MASTER, STARTD
# Note that CONDOR_HOST is NOT this host, it's the remote one!
CONDOR_HOST = ${condor_head}
CONDOR_ADMIN = ${condor_head}
# Use CCB. Connect to the collector on our single Condor head node
CCB_ADDRESS = \$(CONDOR_HOST)
# Force one job slot: /proc/cpuinfo in a container is the same as the hosting machine
# (note: we could also override /proc/cpuinfo)
NUM_CPUS=1
# A hook to be executed when the job stops (disabled for now)
#QWERTYUIOP_HOOK_JOB_EXIT = /condor-hook-job-exit
#STARTER_JOB_HOOK_KEYWORD = QWERTYUIOP
UID_DOMAIN = *
TRUST_UID_DOMAIN = True
SOFT_UID_DOMAIN = True
QUEUE_SUPER_USERS = root, condor
HIGHPORT = 42000
LOWPORT = 41000
SEC_DAEMON_AUTHENTICATION = required
SEC_DAEMON_INTEGRITY = required
SEC_DAEMON_AUTHENTICATION_METHODS = password
SEC_CLIENT_AUTHENTICATION_METHODS = password,fs,gsi,kerberos
SEC_PASSWORD_FILE = /etc/condor/condor_credential
SEC_ENABLE_MATCH_PASSWORD_AUTHENTICATION = True
ALLOW_DAEMON = condor_pool@*, submit-side@matchsession
COLLECTOR_NAME = Condor cluster at ${condor_head}
NEGOTIATOR_INTERVAL = 20
START = TRUE
SUSPEND = FALSE
PREEMPT = FALSE
KILL = FALSE
TRUST_UID_DOMAIN = TRUE
UPDATE_COLLECTOR_WITH_TCP = True
COLLECTOR_SOCKET_CACHE_SIZE = 1000
# The job wrapper, well, wraps the job. Useful to set some basic environment. Can be needed, for
# instance, to run AliEn job agents
#USER_JOB_WRAPPER = /etc/condor/job_wrapper.sh
# This is a dummy value to prevent job killing for consuming too much memory
JOB_DEFAULT_REQUESTMEMORY = 42
# If we don't want to use a DNS... very much NOT RECOMMENDED
#NETWORK_INTERFACE = ${my_ip_address}
#NO_DNS = True
#DEFAULT_DOMAIN_NAME = condor-docker
_EoF_
echo 'done'

# Configure Condor password
echo -n 'Setting Condor secret...'
condor_store_cred add -c -p "$condor_secret" > /dev/null 2>&1
echo 'done'

# Start Condor
echo -n 'Starting Condor...'
service condor start > /dev/null 2>&1
echo 'done'

# Wait one second and check if we have the PID
echo -n "Fetching Condor Master's PID..."
sleep 1
condor_master_pidfile=/var/run/condor/condor.pid
condor_master_pid=$( cat "$condor_master_pidfile" 2> /dev/null )

# Turn off exit-on-error (we have some ifs)
set +e

# Check if PID is valid
if [[ $condor_master_pid -le 0 ]] ; then
  # Bash maps invalid strings to 0 so if $condor_head is invalid, it is -eq 0 (but not == 0)
  echo "FATAL: this PID is invalid: ${condor_master_pid}"
  exit 1
else
  echo "${condor_master_pid}"
fi

# Check if we can ping the process
echo -n 'Checking if the Condor Master is running for real...'
if ! kill -0 $condor_master_pid > /dev/null 2>&1 ; then
  echo "FATAL: no process with PID ${condor_master_pid}"
  exit 2
else
  echo 'yes'
fi

# Wait a bit before invoking the condor_off. Pilot waits for things to come!

echo -n "Waiting ${pilot_sleep_s} seconds for jobs to come"
for (( i=0 ; i<$pilot_sleep_s ; i++ )) ; do
  sleep 1
  echo -n '.'
done
echo 'done waiting'

# Peacefully turning the master off. Master controls startd. "Peacefully" means that no turn off
# will occur until every running job has finished. So, if no job is running, exit immediately
echo -n 'Request a peaceful shutdown to the Condor Master...'
set -e
condor_off -daemon master -peaceful > /dev/null 2>&1
set +e
echo 'request sent'

# Begin the wait...
while [[ 1 ]] ; do
  echo -n "Condor Master status (every ${condor_master_ping_s} s)..."
  kill -0 $condor_master_pid > /dev/null 2>&1
  if [[ $? == 0 ]] ; then
    echo 'still alive'
  else
    echo 'terminated, bye!'
    break
  fi
  sleep $condor_master_ping_s
done

exit 0
